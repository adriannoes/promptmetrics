// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Detect Lovable environment
const isLovablePreview = typeof window !== 'undefined' && 
  (window.location.hostname.includes('lovable.app') || 
   window.location.hostname === 'localhost' ||
   import.meta.env.MODE === 'development');

// Real Supabase configuration
const REAL_SUPABASE_URL = "https://racfoelvuhdifnekjsro.supabase.co";
const REAL_SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJhY2ZvZWx2dWhkaWZuZWtqc3JvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA1MTk3NTksImV4cCI6MjA2NjA5NTc1OX0.m1NKUgLKup4mwc7ma5DPX2Rxemskt2_7iXAI1wcwv_0";

// Fallback placeholders for development
const DEFAULT_SUPABASE_URL = "https://<project-ref>.supabase.co";
const DEFAULT_SUPABASE_ANON_KEY = "anon-key-placeholder";

export function selectNonEmptyEnv(value: unknown, fallback: string): string {
  if (typeof value === 'string') {
    const trimmed = value.trim();
    if (trimmed.length > 0) return trimmed;
  }
  return fallback;
}

export function readViteEnv(): { VITE_SUPABASE_URL?: string; VITE_SUPABASE_ANON_KEY?: string } {
  return {
    VITE_SUPABASE_URL: (import.meta as any)?.env?.VITE_SUPABASE_URL,
    VITE_SUPABASE_ANON_KEY: (import.meta as any)?.env?.VITE_SUPABASE_ANON_KEY,
  };
}

export function getSupabaseEnv(): { url: string; anonKey: string } {
  const { VITE_SUPABASE_URL: envUrl, VITE_SUPABASE_ANON_KEY: envKey } = readViteEnv();
  return getSupabaseEnvFromValues(envUrl, envKey);
}

export function getSupabaseEnvFromValues(
  envUrl: unknown,
  envKey: unknown
): { url: string; anonKey: string } {
  // Use real Supabase config for all environments
  const url = selectNonEmptyEnv(envUrl, REAL_SUPABASE_URL);
  const anonKey = selectNonEmptyEnv(envKey, REAL_SUPABASE_ANON_KEY);
  
  return { url, anonKey };
}

const { url: SUPABASE_URL, anonKey: SUPABASE_PUBLISHABLE_KEY } = getSupabaseEnv();

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create appropriate client based on environment and configuration
function createSupabaseClient() {
  try {
    // Always use real Supabase client with proper configuration
    const client = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        storage: typeof window !== 'undefined' ? localStorage : undefined,
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: true,
        flowType: 'pkce',
        debug: false
      },
      realtime: {
        params: {
          eventsPerSecond: 10,
        },
      },
    });

    console.info(`[Supabase] Client initialized with URL: ${SUPABASE_URL.substring(0, 30)}...`);
    return client;
  } catch (error) {
    console.error('[Supabase] Failed to create client:', error);
    // Return a basic client as fallback
    return createClient<Database>('https://placeholder.supabase.co', 'placeholder-key');
  }
}

export const supabase = createSupabaseClient();

// Environment validation and warnings
if (typeof window !== 'undefined' && import.meta.env?.MODE !== 'production') {
  try {
    const envUrl = (import.meta as any)?.env?.VITE_SUPABASE_URL;
    const envKey = (import.meta as any)?.env?.VITE_SUPABASE_ANON_KEY;
    
    if (isLovablePreview) {
      if (!envUrl || !envKey) {
        console.info('[Supabase] Running in Lovable preview mode with embedded configuration');
      } else {
        console.info('[Supabase] Running in Lovable preview mode with environment variables');
      }
    } else {
      if (typeof SUPABASE_URL === 'string' && !SUPABASE_URL.startsWith('https://')) {
        console.warn('[security] SUPABASE_URL não usa HTTPS. Configure VITE_SUPABASE_URL com https://<ref>.supabase.co');
      }
      
      const missingUrl = (envUrl ?? '').trim().length === 0;
      const missingKey = (envKey ?? '').trim().length === 0;
      if (missingUrl || missingKey) {
        console.warn('[env] VITE_SUPABASE_URL ou VITE_SUPABASE_ANON_KEY ausentes/vazias. Usando valores padrão.');
      }
    }
  } catch (error) {
    console.warn('[Supabase] Environment check failed:', error);
  }
}