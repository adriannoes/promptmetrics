// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Limpar qualquer sessão antiga de projetos anteriores
const cleanOldSessions = () => {
  const keysToRemove = [];
  for (let i = 0; i < localStorage.length; i++) {
    const key = localStorage.key(i);
    if (key && (key.includes('racfoelvuhdifnekjsro') || key.includes('supabase.auth.token'))) {
      keysToRemove.push(key);
    }
  }
  keysToRemove.forEach(key => localStorage.removeItem(key));
};

// Executar limpeza na inicialização
cleanOldSessions();

import { supabase as supabaseConfig, isProduction, isDevelopment } from '@/config/environment';

const SUPABASE_URL = supabaseConfig.url;
const SUPABASE_PUBLISHABLE_KEY = supabaseConfig.anonKey;

// Testar conectividade do projeto (apenas em desenvolvimento)
const testConnectivity = async () => {
  if (isProduction) return; // Não executar em produção
  
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10s timeout

    const response = await fetch(`${SUPABASE_URL}/rest/v1/`, {
      method: 'HEAD',
      headers: {
        'apikey': SUPABASE_PUBLISHABLE_KEY,
      },
      signal: controller.signal,
    });

    clearTimeout(timeoutId);

    return response.ok;
  } catch (error) {
    return false;
  }
};

// Executar teste de conectividade apenas em desenvolvimento
if (isDevelopment) {
  testConnectivity();
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    storageKey: 'vtyrpodosmhnyendcrjf-auth-token', // Chave única para evitar conflitos
  }
});