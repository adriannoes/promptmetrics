// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Preferir variáveis de ambiente (Vite). Fallbacks são placeholders seguros para desenvolvimento local
const DEFAULT_SUPABASE_URL = "https://<project-ref>.supabase.co";
const DEFAULT_SUPABASE_ANON_KEY = "anon-key-placeholder";

export function selectNonEmptyEnv(value: unknown, fallback: string): string {
  if (typeof value === 'string') {
    const trimmed = value.trim();
    if (trimmed.length > 0) return trimmed;
  }
  return fallback;
}

export function readViteEnv(): { VITE_SUPABASE_URL?: string; VITE_SUPABASE_ANON_KEY?: string } {
  return {
    VITE_SUPABASE_URL: (import.meta as any)?.env?.VITE_SUPABASE_URL,
    VITE_SUPABASE_ANON_KEY: (import.meta as any)?.env?.VITE_SUPABASE_ANON_KEY,
  };
}

export function getSupabaseEnv(): { url: string; anonKey: string } {
  const { VITE_SUPABASE_URL: envUrl, VITE_SUPABASE_ANON_KEY: envKey } = readViteEnv();
  return getSupabaseEnvFromValues(envUrl, envKey);
}

export function getSupabaseEnvFromValues(
  envUrl: unknown,
  envKey: unknown
): { url: string; anonKey: string } {
  return {
    url: selectNonEmptyEnv(envUrl, DEFAULT_SUPABASE_URL),
    anonKey: selectNonEmptyEnv(envKey, DEFAULT_SUPABASE_ANON_KEY),
  };
}

const { url: SUPABASE_URL, anonKey: SUPABASE_PUBLISHABLE_KEY } = getSupabaseEnv();

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    debug: true
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
  // Remove custom global headers to avoid CORS preflight failures in Edge Functions
});

// Aviso em desenvolvimento se URL não estiver usando HTTPS
if (typeof window !== 'undefined' && import.meta.env?.MODE !== 'production') {
  try {
    if (typeof SUPABASE_URL === 'string' && !SUPABASE_URL.startsWith('https://')) {
      // eslint-disable-next-line no-console
      console.warn('[security] SUPABASE_URL não usa HTTPS. Configure VITE_SUPABASE_URL com https://<ref>.supabase.co');
    }
    const missingUrl = ((import.meta as any)?.env?.VITE_SUPABASE_URL ?? '').trim().length === 0;
    const missingKey = ((import.meta as any)?.env?.VITE_SUPABASE_ANON_KEY ?? '').trim().length === 0;
    if (missingUrl || missingKey) {
      // eslint-disable-next-line no-console
      console.warn('[env] VITE_SUPABASE_URL ou VITE_SUPABASE_ANON_KEY ausentes/vazias. Usando valores padrão de desenvolvimento.');
    }
  } catch {
    // noop
  }
}