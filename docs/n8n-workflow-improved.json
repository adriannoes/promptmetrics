{
  "name": "PromptMetrics - Improved Brand Analysis",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "661b6816-1ea9-455d-82ae-b98602c9fbd7",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [-240, 32],
      "id": "webhook-node",
      "name": "Webhook",
      "webhookId": "661b6816-1ea9-455d-82ae-b98602c9fbd7"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "auth-check-1",
              "leftValue": "={{ $json.body.source }}",
              "rightValue": "=promptmetrics-frontend-analysis-page",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "auth-check-2",
              "leftValue": "={{ $json.body.triggered_from }}",
              "rightValue": "={{ $json.body.triggered_from }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "auth-node",
      "name": "Authentication Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-16, 32]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "validate-domain",
              "name": "domain",
              "value": "={{ $json.body.domain || 'example.com' }}",
              "type": "string"
            },
            {
              "id": "validate-source",
              "name": "source",
              "value": "={{ $json.body.source }}",
              "type": "string"
            },
            {
              "id": "validate-triggered-from",
              "name": "triggered_from",
              "value": "={{ $json.body.triggered_from }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [224, 32],
      "id": "validation-node",
      "name": "Input Validation"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [480, 32],
      "id": "setup-model",
      "name": "Setup Analysis Model",
      "credentials": {
        "openAiApi": {
          "id": "g11WR0iZMVJUDCi6",
          "name": "OpenAI (promptmetrics)"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.domain }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a Marketing Analyst expert. Analyze the company based on its domain and provide comprehensive insights.\n\n**Domain to analyze:** {{ $json.domain }}\n\n**Required Output:**\nProvide analysis in the exact JSON schema format expected by the parser."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [720, 32],
      "id": "company-analysis-agent",
      "name": "Company Analysis Agent"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Google search using SerpApi",
        "q": "={{ $fromAI('Search_Query__q_', ``, 'string') }}",
        "location": "={{ $fromAI('Location__location_', ``, 'string') }}",
        "additionalFields": {},
        "requestOptions": {}
      },
      "type": "n8n-nodes-serpapi.serpApiTool",
      "typeVersion": 1,
      "position": [480, 240],
      "id": "google-search-tool",
      "name": "Google Search Tool",
      "credentials": {
        "serpApi": {
          "id": "7cgf4JI0fIQn4CG6",
          "name": "SerpApi (esadrianno@gmail.com)"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"primaryMarket\": \"Technology/SaaS\",\n  \"businessModel\": \"B2B SaaS\",\n  \"topCompetitors\": [\"Competitor1\", \"Competitor2\", \"Competitor3\"],\n  \"idealCustomerProfile\": {\n    \"description\": \"Detailed ICP description\",\n    \"department\": \"IT/Operations\",\n    \"jobTitle\": \"Project Manager\",\n    \"seniority\": \"Mid-level\"\n  },\n  \"relatedGoogleQuestions\": [\n    {\"question\": \"What is...?\"}\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [960, 32],
      "id": "company-analysis-parser",
      "name": "Company Analysis Parser"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "prepare-analysis",
              "name": "analysis",
              "value": "={{ $json.output }}",
              "type": "object"
            },
            {
              "id": "prepare-domain",
              "name": "domain",
              "value": "={{ $('Input Validation').item.json.domain }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1200, 32],
      "id": "prepare-prompts-node",
      "name": "Prepare Prompts Generation"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-2024-08-06",
          "mode": "list",
          "cachedResultName": "gpt-4o-2024-08-06"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [1440, 32],
      "id": "prompts-generator-model",
      "name": "Prompts Generator Model",
      "credentials": {
        "openAiApi": {
          "id": "g11WR0iZMVJUDCi6",
          "name": "OpenAI (promptmetrics)"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Generate 10 realistic user prompts for {{ $json.domain }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Generate 10 natural user prompts that people would ask AI models about {{ $json.domain }} based on the company analysis provided."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [1680, 32],
      "id": "prompts-generator",
      "name": "Generate User Prompts"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"generatedPrompts\": [\n    {\"prompt\": \"What is...?\"},\n    {\"prompt\": \"How to...?\"}\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [1920, 32],
      "id": "prompts-parser",
      "name": "Prompts Parser"
    },
    {
      "parameters": {
        "fieldToSplitOut": "generatedPrompts",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [2160, 32],
      "id": "split-prompts",
      "name": "Split Prompts for Parallel Processing"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [2400, 0],
      "id": "openai-responses",
      "name": "OpenAI Responses",
      "credentials": {
        "openAiApi": {
          "id": "g11WR0iZMVJUDCi6",
          "name": "OpenAI (promptmetrics)"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [2400, 240],
      "id": "gemini-responses",
      "name": "Gemini Responses",
      "credentials": {
        "googlePalmApi": {
          "id": "SjXZWIR90DDEHDox",
          "name": "Gemini (PromptMetrics)"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-3-5-sonnet-20241022",
          "mode": "list",
          "cachedResultName": "Claude 3.5 Sonnet"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [2400, 480],
      "id": "claude-responses",
      "name": "Claude Responses",
      "credentials": {
        "anthropicApi": {
          "id": "u4vHNwi4A6Lp7CF2",
          "name": "Anthropic (PromptMetrics)"
        }
      }
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [2640, 240],
      "id": "merge-responses",
      "name": "Merge All LLM Responses"
    },
    {
      "parameters": {
        "jsCode": "// Group responses by prompt and model\nconst responsesByPrompt = {};\nconst domain = items[0]?.json?.domain || 'unknown';\n\nfor (const item of items) {\n  const prompt = item.json.prompt || item.json.promptsToRun?.prompt;\n  const model = item.json.model || 'unknown';\n  const response = item.json.text || item.json.response || '';\n\n  if (prompt) {\n    if (!responsesByPrompt[prompt]) {\n      responsesByPrompt[prompt] = {};\n    }\n    responsesByPrompt[prompt][model] = response;\n  }\n}\n\nreturn [{\n  json: {\n    domain: domain,\n    comparative_results: responsesByPrompt,\n    analysis: items[0]?.json?.analysis || {}\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2880, 240],
      "id": "process-responses",
      "name": "Process and Group Responses"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [3120, 240],
      "id": "comprehensive-analysis",
      "name": "Comprehensive Analysis Model",
      "credentials": {
        "openAiApi": {
          "id": "g11WR0iZMVJUDCi6",
          "name": "OpenAI (promptmetrics)"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ JSON.stringify($json.comparative_results) }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a senior business analyst. Based on the LLM responses provided, create a comprehensive brand analysis following the exact payload structure required."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [3360, 240],
      "id": "brand-analysis-agent",
      "name": "Brand Analysis Agent"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"summary\": \"Comprehensive brand analysis summary...\",\n  \"score\": 85,\n  \"recommendations\": [\"Recommendation 1\", \"Recommendation 2\"],\n  \"sentiment_trends\": [{\"month\": \"Jan\", \"Brand\": 75, \"Competitor1\": 68}],\n  \"ranking_data\": [{\"month\": \"Jan\", \"Brand\": 2.1, \"Competitor1\": 2.8}],\n  \"overall_sentiment\": [{\"name\": \"Brand\", \"score\": 77.6, \"color\": \"#3B82F6\"}],\n  \"share_of_rank\": [{\"month\": \"Jan\", \"Brand\": 35, \"Competitor1\": 28}],\n  \"competitor_analysis\": {\n    \"market_share\": [{\"name\": \"Brand\", \"value\": 35, \"color\": \"#3B82F6\"}],\n    \"market_trends\": [{\"month\": \"Jan\", \"Brand\": 32, \"Competitor1\": 28}],\n    \"strategic_priorities\": [{\"id\": 1, \"title\": \"Priority 1\", \"priority\": \"high\"}],\n    \"opportunities\": [{\"category\": \"Growth\", \"title\": \"Opportunity 1\", \"impact\": \"high\"}]\n  },\n  \"prompt_analysis\": {\n    \"sentiment_by_llm\": {\"ChatGPT\": 82, \"Gemini\": 78, \"Claude\": 85},\n    \"ranking_by_prompt\": {\"prompt1\": {\"Brand\": 1, \"Competitor1\": 2}},\n    \"performance_metrics\": {\"total_mentions\": 247, \"positive_mentions\": 198}\n  },\n  \"strategic_insights\": {\n    \"key_insights\": [\"Insight 1...\"],\n    \"action_items\": [\"Action 1...\"],\n    \"growth_opportunities\": [\"Growth opportunity 1...\"],\n    \"competitive_threats\": [\"Threat 1...\"]\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [3600, 240],
      "id": "complete-payload-parser",
      "name": "Complete Payload Parser"
    },
    {
      "parameters": {
        "jsCode": "// Build final payload with proper structure\nconst analysisData = items[0].json;\nconst domain = items[0].json.domain || 'example.com';\n\nconst finalPayload = {\n  domain: domain,\n  status: 'completed',\n  analysis_data: {\n    // Core data\n    summary: analysisData.summary || 'Analysis completed successfully',\n    score: analysisData.score || 85,\n    recommendations: analysisData.recommendations || [],\n    \n    // Dashboard data\n    sentiment_trends: analysisData.sentiment_trends || [],\n    ranking_data: analysisData.ranking_data || [],\n    overall_sentiment: analysisData.overall_sentiment || [],\n    share_of_rank: analysisData.share_of_rank || [],\n    \n    // Competitor analysis\n    competitor_analysis: analysisData.competitor_analysis || {\n      market_share: [],\n      market_trends: [],\n      strategic_priorities: [],\n      opportunities: []\n    },\n    \n    // Prompt analysis\n    prompt_analysis: analysisData.prompt_analysis || {\n      sentiment_by_llm: {},\n      ranking_by_prompt: {},\n      performance_metrics: {}\n    },\n    \n    // Strategic insights\n    strategic_insights: analysisData.strategic_insights || {\n      key_insights: [],\n      action_items: [],\n      growth_opportunities: [],\n      competitive_threats: []\n    }\n  }\n};\n\nreturn [{\n  json: finalPayload,\n  executionTime: new Date().toISOString()\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3840, 240],
      "id": "build-final-payload",
      "name": "Build Final Payload"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://your-project.supabase.co/functions/v1/receive-analysis",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "raw",
        "body": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [4080, 240],
      "id": "send-to-supabase",
      "name": "Send to Supabase Edge Function",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Wbu9E4qQ4M7HSiuM",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "content": "Analysis completed and sent to Supabase",
        "level": "info"
      },
      "type": "n8n-nodes-base.log",
      "typeVersion": 1,
      "position": [4320, 240],
      "id": "success-log",
      "name": "Success Log"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [160, 240],
      "id": "no-op-failure",
      "name": "No Operation (Auth Failed)"
    },
    {
      "parameters": {
        "content": "Authentication failed",
        "level": "error"
      },
      "type": "n8n-nodes-base.log",
      "typeVersion": 1,
      "position": [160, 400],
      "id": "auth-failure-log",
      "name": "Auth Failure Log"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Authentication Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Authentication Check": {
      "main": [
        [
          {
            "node": "Input Validation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation (Auth Failed)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Validation": {
      "main": [
        [
          {
            "node": "Company Analysis Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setup Analysis Model": {
      "ai_languageModel": [
        [
          {
            "node": "Company Analysis Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Company Analysis Agent": {
      "main": [
        [
          {
            "node": "Prepare Prompts Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Search Tool": {
      "ai_tool": [
        [
          {
            "node": "Company Analysis Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Company Analysis Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Company Analysis Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Prompts Generation": {
      "main": [
        [
          {
            "node": "Generate User Prompts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prompts Generator Model": {
      "ai_languageModel": [
        [
          {
            "node": "Generate User Prompts",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate User Prompts": {
      "main": [
        [
          {
            "node": "Split Prompts for Parallel Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prompts Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Generate User Prompts",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Split Prompts for Parallel Processing": {
      "main": [
        [
          {
            "node": "OpenAI Responses",
            "type": "main",
            "index": 0
          },
          {
            "node": "Gemini Responses",
            "type": "main",
            "index": 0
          },
          {
            "node": "Claude Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Responses": {
      "main": [
        [
          {
            "node": "Merge All LLM Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Responses": {
      "main": [
        [
          {
            "node": "Merge All LLM Responses",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Claude Responses": {
      "main": [
        [
          {
            "node": "Merge All LLM Responses",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge All LLM Responses": {
      "main": [
        [
          {
            "node": "Process and Group Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process and Group Responses": {
      "main": [
        [
          {
            "node": "Brand Analysis Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comprehensive Analysis Model": {
      "ai_languageModel": [
        [
          {
            "node": "Brand Analysis Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Brand Analysis Agent": {
      "main": [
        [
          {
            "node": "Build Final Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Complete Payload Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Brand Analysis Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Build Final Payload": {
      "main": [
        [
          {
            "node": "Send to Supabase Edge Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to Supabase Edge Function": {
      "main": [
        [
          {
            "node": "Success Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation (Auth Failed)": {
      "main": [
        [
          {
            "node": "Auth Failure Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Sao_Paulo",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "SU2CFLke9bG1tafq"
  },
  "active": false,
  "versionId": "improved-workflow-v2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "cd5f8d851eab8d45d858984284cb119d646feee4eb743fad476ddf82e530f093"
  },
  "id": "improved-promptmetrics-workflow",
  "tags": ["improved", "brand-analysis", "n8n"]
}
